{
  description = "NixOS configuration for rk3588 remote deployment with UEFI and U-Boot options";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-25.05";
    opifan.url = "github:benjajaja/opifancontrol?ref=main";
  };

  outputs = {
    nixpkgs,
    opifan,
    ...
  }: let
    inherit nixpkgs opifan;

    # Possible values for compilationType: "local-native", "remote-native", or "cross".
    compilationType = "remote-native"; # Choose the compilation type here.

    localSystem = "x86_64-linux";
    targetSystem = "aarch64-linux";

    # Kernel packages based on compilationType (local native, remote native, or cross-compilation)
    pkgsKernel =
      if compilationType == "cross"
      then
        import nixpkgs {
          inherit localSystem;
          crossSystem = targetSystem;
        }
      else
        # For both local-native & remote-native compilation
        import nixpkgs {system = targetSystem;};

    # TODO: just move to hardware-configuration or configuration
    bootloaderModule = {
      boot = { # grub bootloader configured for UEFI
        growPartition = true; # If partition resizing is necessary
        kernelParams = ["console=ttyS0"]; # If you need serial console access
        # loader.timeout = lib.mkDefault 0;  # Optional, to skip GRUB menu
        initrd.availableKernelModules = ["uas"]; # If specific kernel modules are required
        loader.grub = {
          enable = true;
          device = "nodev";
          efiSupport = true;
          efiInstallAsRemovable = true;
        };
      };
    };

    matrixPath = builtins.getEnv "PWD" + "/matrix"; # this is intentional: https://colmena.cli.rs/unstable/features/keys.html#flakes
  in {
    colmena = {
      meta = {
        nixpkgs = import nixpkgs {system = localSystem;};
        specialArgs = {
          inherit nixpkgs opifan;
        };
      };

      ## TODO: to apply locally this "opi5" must match your local host name, such as "orangepi5" or "orangepi5plus"
      ops = {
        deployment.targetHost =
          if compilationType != "local-native"
          # TODO: you will want to change this IP to another address or host name
          then "ops"
          else null;
        deployment.targetUser =
          if compilationType != "local-native"
          then "root"
          else null;
        deployment.buildOnTarget = compilationType == "remote-native";

        # Allow local deployment only if building locally
        deployment.allowLocalDeployment = compilationType == "local-native";

        imports = [
          # Import the correct bootloader based on the selected bootType.
          bootloaderModule

          opifan.nixosModules.default

          # Custom configuration
          ./configuration.nix
          ./user-group.nix
          # TODO: you will likely need a fileSystems entry and additional availableKernelModules these can be included from hardware-configuration.nix generated by `nixos-generate-config`.
          ./hardware-configuration.nix
        ];

        deployment.keys = {
          "homeserver.yaml" = {
            keyFile = "${matrixPath}/homeserver.yaml";
            destDir = "/run/matrix-config";
            user = "matrix-synapse";
            group = "matrix-synapse";
            permissions = "0600";
          };
          "qdice.wtf.signing.key" = {
            keyFile = "${matrixPath}/qdice.wtf.signing.key";
            destDir = "/run/matrix-config";
            user = "matrix-synapse";
            group = "matrix-synapse";
            permissions = "0600";
          };
          "doublepuppet.yaml" = {
            keyFile = "${matrixPath}/doublepuppet.yaml";
            destDir = "/run/matrix-config";
            user = "matrix-synapse";
            group = "matrix-synapse";
            permissions = "0600";
          };
          "mautrix-telegram.env" = {
            keyFile = "${matrixPath}/mautrix-telegram.env";
            destDir = "/run/matrix-config";
            user = "mautrix-telegram";
            group = "mautrix-telegram";
            permissions = "0600";
          };
          "mautrix-whatsapp.env" = {
            keyFile = "${matrixPath}/mautrix-whatsapp.env";
            destDir = "/run/matrix-config";
            user = "mautrix-whatsapp";
            group = "mautrix-whatsapp";
            permissions = "0600";
          };
        };
      };
    };
    devShells.${localSystem}.default = let
      pkgs = import nixpkgs {system = localSystem;};
    in
      pkgs.mkShell {
        buildInputs = with pkgs; [
          colmena
        ];

        shellHook = ''
          if [ -f .env ]; then
            set -a
            source .env
            set +a
            echo "Environment variables loaded from .env"
          fi
        '';
      };
  };
}
